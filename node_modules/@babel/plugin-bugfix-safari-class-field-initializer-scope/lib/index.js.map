{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { declare } from \"@babel/helper-plugin-utils\";\nimport { types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/core\";\n\nfunction needsWrapping(node: t.Node): boolean {\n  if (t.isLiteral(node) && !t.isTemplateLiteral(node)) {\n    return false;\n  }\n\n  if (\n    t.isCallExpression(node) ||\n    t.isOptionalCallExpression(node) ||\n    t.isNewExpression(node)\n  ) {\n    return needsWrapping(node.callee) || node.arguments.some(needsWrapping);\n  }\n\n  if (t.isTemplateLiteral(node)) {\n    return node.expressions.some(needsWrapping);\n  }\n\n  if (t.isTaggedTemplateExpression(node)) {\n    return needsWrapping(node.tag) || needsWrapping(node.quasi);\n  }\n\n  if (t.isArrayExpression(node)) {\n    return node.elements.some(needsWrapping);\n  }\n\n  if (t.isObjectExpression(node)) {\n    return node.properties.some(prop => {\n      if (t.isObjectProperty(prop)) {\n        return (\n          needsWrapping(prop.value) ||\n          (prop.computed && needsWrapping(prop.key))\n        );\n      }\n      if (t.isObjectMethod(prop)) {\n        return false;\n      }\n      return false;\n    });\n  }\n\n  if (t.isMemberExpression(node) || t.isOptionalMemberExpression(node)) {\n    return (\n      needsWrapping(node.object) ||\n      (node.computed && needsWrapping(node.property))\n    );\n  }\n\n  if (\n    t.isFunctionExpression(node) ||\n    t.isArrowFunctionExpression(node) ||\n    t.isClassExpression(node)\n  ) {\n    return false;\n  }\n\n  if (t.isThisExpression(node)) {\n    return false;\n  }\n\n  if (t.isSequenceExpression(node)) {\n    return node.expressions.some(needsWrapping);\n  }\n\n  // Is an identifier, or anything else not covered above\n  return true;\n}\n\nfunction wrapInitializer(\n  path: NodePath<t.ClassProperty | t.ClassPrivateProperty>,\n) {\n  const { value } = path.node;\n\n  if (value && needsWrapping(value)) {\n    path.node.value = t.callExpression(\n      t.arrowFunctionExpression([], value),\n      [],\n    );\n  }\n}\n\nexport default declare(api => {\n  api.assertVersion(REQUIRED_VERSION(\"^7.16.0\"));\n\n  return {\n    name: \"plugin-bugfix-safari-class-field-initializer-scope\",\n\n    visitor: {\n      ClassProperty(path) {\n        wrapInitializer(path);\n      },\n      ClassPrivateProperty(path) {\n        wrapInitializer(path);\n      },\n    },\n  };\n});\n"],"names":["needsWrapping","node","t","isLiteral","isTemplateLiteral","isCallExpression","isOptionalCallExpression","isNewExpression","callee","arguments","some","expressions","isTaggedTemplateExpression","tag","quasi","isArrayExpression","elements","isObjectExpression","properties","prop","isObjectProperty","value","computed","key","isObjectMethod","isMemberExpression","isOptionalMemberExpression","object","property","isFunctionExpression","isArrowFunctionExpression","isClassExpression","isThisExpression","isSequenceExpression","wrapInitializer","path","callExpression","arrowFunctionExpression","declare","api","assertVersion","name","visitor","